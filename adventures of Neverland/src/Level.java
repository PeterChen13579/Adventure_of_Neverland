/** 
 * Used to store data on objects and characters
 * 
 * By Peter Chen
 * By Tony Lee
 */

import java.io.File; 
import java.io.FileReader;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JButton;
import java.util.Scanner;
import java.util.ArrayList;
import java.awt.Graphics2D;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JButton;
import javax.swing.JTextArea;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.Color;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.IOException;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import java.awt.Rectangle;
import javax.swing.JPanel;
import java.awt.Graphics;
import javax.sound.sampled.*;

class Level extends JPanel{
    
    private int height, width, levelNumber;
    private ArrayList <LevelObject> levelObjects;
    private ArrayList <Fireball> fireballs;
    private ArrayList <PlayerProjectile> bulletProjectile;
    private ArrayList <Bomb> bomb;
    private Player player;
    private ArrayList <Enemy> enemies;
    private ArrayList <Map> maps;
    private int maxMapX = 0;
    private int maxMapY = 0;
    private Map map;
    private Rectangle exitBox;
    private int enemiesKilled = 0;
    private int bulletFired = 0;
    private int health;
    private int exitNum;
    private int[][] obstacles;
    
    private int[][] villageMap = {                                                                                                                                            
        {20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20},
        {19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19},
        {20, 22,  4,  7, 10, 13, 16, 32, 32, 32, 32, 32, 32, 32,  0,  0,  0,  0,  0,  0,  0,  0, 20, 22, 20, 22,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 20, 22, 20},
        {19, 21,  5,  8, 11, 14, 17, 32,  0,  2,  0,  0,  0, 32,  0,  0,  0,  0,  0,  0,  0,  0, 19, 21, 19, 21,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 19, 21, 19},
        {20, 22,  6,  9, 12, 15, 18, 32,  0,  0,  0,  0,  0, 32,  0,  0,  0,  0,  0,  0,  0,  0, 20, 22, 20, 22,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0, 20, 22, 20},
        {19, 21,  0,  1,  1,  1,  0, 32,  0,  0,  0,  2,  0, 32,  0,  0,  0,  0,  0,  2,  0,  0, 19, 21, 19, 21,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0, 19, 21, 19},
        {20, 22,  0,  1,  1,  1,  0, 32, 32, 32,  0, 32, 32, 32,  0,  0,  0,  0,  0,  0,  0,  0, 20, 22, 20, 22,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  1,  1,  0,  0,  0, 20, 22, 20},
        {19, 21,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0, 19, 21, 19, 21,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0, 19, 21, 19},
        {20, 22,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 20, 22, 20, 22,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0, 20, 22, 20, 22,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0, 20, 22, 20},
        {19, 21,  2,  1,  1,  1,  0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 19, 21, 19, 21,  0,  2,  0,  0,  0,  1,  1,  0,  0,  0, 19, 21, 19, 21,  0,  0,  3,  0,  0,  1,  1,  0,  0,  0, 19, 21, 19},
        {20, 22,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0, 20, 22, 20, 22,  0,  0,  0,  0,  3,  1,  1,  0,  0,  0, 20, 22, 20, 22,  0,  0,  0,  0,  0,  1,  1,  0,  0,  2, 20, 22, 20},
        {19, 21,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 19, 21, 19, 21,  0,  0,  0,  0,  0,  1,  1,  0,  2,  0, 19, 21, 19, 21,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0, 19, 21, 19},
        {20, 22,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0, 20, 22, 20, 22,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0, 20, 22, 20, 22,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0, 20, 22, 20},
        {19, 21,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0, 19, 21, 19, 21,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0, 19, 21, 19, 21,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0, 19, 21, 19},
        {20, 22,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0, 20, 22, 20, 22,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0, 20, 22, 20, 22,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0, 20, 22, 20},
        {19, 21,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  1,  1,  0,  3,  0,  0, 19, 21, 19, 21,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0, 19, 21, 19, 21,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0, 19, 21, 19},
        {20, 22,  0,  0,  0,  2,  0,  0, 20, 22,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0, 20, 22, 20, 22,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0, 20, 22, 20, 22,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0, 20, 22, 20},
        {19, 21,  0,  0,  0,  0,  0,  0, 19, 21,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0, 19, 21, 19, 21,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0, 19, 21, 19, 21,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0, 19, 21, 19},
        {20, 22,  0,  0,  0,  0,  0,  0, 20, 22,  0,  2,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0, 20, 22, 20, 22,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0, 20, 22, 20, 22,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0, 20, 22, 20},
        {19, 21,  0,  0,  0,  3,  0,  0, 19, 21,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0, 19, 21, 19, 21,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0, 19, 21, 19, 21,  0,  0,  0,  0,  0,  1,  1,  0,  2,  0, 19, 21, 19},
        {20, 22,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  1,  1,  0,  0,  0, 20, 22, 20, 22,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0, 20, 22, 20},
        {19, 21,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0, 19, 21, 19, 21,  0,  0,  2,  0,  0,  1,  1,  0,  0,  0, 19, 21, 19},
        {20, 22,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0, 20, 22, 20, 22,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0, 20, 22, 20},
        {19, 21,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0, 19, 21, 19, 21,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0, 19, 21, 19},
        {20, 22,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0, 20, 22, 20, 22,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0, 20, 22, 20},
        {19, 21,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0, 19, 21, 19, 21,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0, 19, 21, 19},
        {20, 22,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 20, 22, 20, 22,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0, 20, 22, 20},        //1/2M
        {19, 21,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 19, 21, 19, 21,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0, 19, 21, 19},        
        {20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20,  1,  1, 22, 20, 22, 20, 22, 20},
        {19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19, 21, 19,  1,  1, 21, 19, 21, 19, 21, 19},
        {20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 33, 33, 22, 20, 22, 20, 22, 20}
    };
    private int[][] swampMap = { // [31][53]
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  2,  2,  0,  1,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  2,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  2,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  2,  2,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  2,  2,  0,  0,  1,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  2,  2,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  2,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  3,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  2,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  2,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  2,  2,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  2,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  2,  2,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  2,  0,  0,  0,  1,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  2,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  2,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  2,  0,  0,  0,  0,  0,  0},
        { 0,  1,  0,  0,  0,  1,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  3,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  2,  2,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  1,  0,  2,  2,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  0},
        { 0,  0,  0,  0,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  4,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  4,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
    };
    private int[][] desertMap = { // [31][53]
        { 0,  0,  0, 11,  0,  0, 11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  2,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5,  7,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  6,  8,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5,  7,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0},
        { 0,  1,  0,  0,  0,  0,  0,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5,  7,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0, 11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  6,  8,  4,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5,  7,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  8,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5,  7,  0,  0},
        { 0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  0,  0,  0,  4,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  8,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 12, 12,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 12, 12,  0,  0,  0,  0},
        { 0,  0,  0, 11,  0,  0, 11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
    };
    private int[][] forestMap = { // [31][53]
        { 5,  7,  5,  7, 11, 12,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5},
        { 6,  8,  6,  8, 11, 12,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6},
        { 5,  7,  0,  0, 11, 12,  1,  0,  5,  7,  5,  7,  5,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  1,  5,  7,  5},
        { 6,  8,  0,  0, 11, 12,  0,  0,  6,  8,  6,  8,  6,  8,  4,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  0,  0,  0,  0, 15, 13,  0,  0,  0,  0,  0,  0,  0,  0,  6,  8,  6},
        { 5,  7,  0,  0, 11, 12,  0,  0,  5,  7,  5,  7,  5,  7,  3,  0,  4,  0, 15, 13,  0,  0,  0,  0,  0,  0,  0,  0,  5,  7,  5,  7,  5,  7,  5,  7,  0, 15, 19, 19, 10, 10, 19, 19, 19, 19, 19, 19, 13,  0,  5,  7,  5},
        { 6,  8,  0,  0, 11, 12,  0,  0,  6,  8,  6,  8,  6,  8,  0,  0, 15, 19, 10, 10, 19, 19, 19, 19, 13,  0,  0,  0,  6,  8,  6,  8,  6,  8,  6,  8,  0, 11, 10, 18, 18, 18, 18, 18, 18, 18, 10, 10, 12,  0,  6,  8,  6},
        { 5,  7,  0,  0, 11, 10, 19, 19, 19, 13,  5,  7,  5,  7,  0,  2, 11, 10, 18, 18, 18, 18, 18, 10, 10, 13,  0,  0,  5,  7,  5,  7,  5,  7,  0,  0,  0, 11, 12,  0,  0,  0,  0,  0,  0,  0, 14, 10, 12,  4,  5,  7,  5},
        { 6,  8,  1,  0, 11, 10, 10, 10, 10, 12,  6,  8,  6,  8,  0,  0, 11, 12,  0,  0,  0,  0,  0, 14, 10, 12,  0,  0,  6,  8,  6,  8,  6,  8,  0,  0,  0, 11, 12,  0,  0,  0,  0,  4,  0,  0,  0, 11, 12,  4,  6,  8,  6},
        { 5,  7,  0,  0, 14, 18, 18, 10, 10, 12,  5,  7,  5,  7,  0,  0, 11, 12,  0,  0,  5,  7,  5,  7, 11, 12,  1,  0,  0,  1,  5,  7,  5,  7,  0,  0,  0, 11, 12,  0,  5,  7,  5,  7,  5,  7,  0, 11, 12,  0,  5,  7,  5},
        { 6,  8,  0,  0,  0,  0,  0, 11, 10, 16,  6,  8,  6,  8,  2,  0, 11, 12,  0,  0,  6,  8,  6,  8, 11, 12,  0,  0,  0,  4,  6,  8,  6,  8,  0,  0, 15, 10, 12,  0,  6,  8,  6,  8,  6,  8,  0, 11, 12,  0,  6,  8,  6},
        { 5,  7,  5,  7,  2,  2,  0, 11, 12,  0,  5,  7,  5,  7,  0,  0, 11, 12,  0,  0,  5,  7,  5,  7, 11, 12,  0,  0,  0,  4,  5,  7,  5,  7,  0,  0, 11, 10, 16,  0,  5,  7,  5,  7,  5,  7,  0, 11, 12,  0,  5,  7,  5},
        { 6,  8,  6,  8,  0,  2,  0, 11, 12,  0,  6,  8,  6,  8,  0,  0, 11, 12,  0,  0,  6,  8,  6,  8, 11, 12,  0,  0,  0,  3,  6,  8,  6,  8,  0, 15, 10, 12,  0,  0,  6,  8,  6,  8,  6,  8,  0, 11, 10, 13,  6,  8,  6},
        { 5,  7,  5,  7,  0,  0,  0, 11, 12,  1,  5,  7,  5,  7,  0,  0, 11, 12,  0,  0,  5,  7,  5,  7, 11, 12,  0,  0,  0,  0,  5,  7,  5,  7,  0, 11, 10, 12,  0,  0,  5,  7,  5,  7,  5,  7,  1, 11, 10, 12,  5,  7,  5},
        { 6,  8,  6,  8,  0,  0,  0, 11, 10, 13,  6,  8,  6,  8,  0,  0, 11, 12,  0,  0,  6,  8,  6,  8, 11, 10, 13,  0,  0,  0,  6,  8,  6,  8,  0, 14, 10, 12,  0,  0,  6,  8,  6,  8,  6,  8,  0, 11, 10, 12,  6,  8,  6},
        { 5,  7,  5,  7,  0,  0,  0, 11, 10, 16,  5,  7,  5,  7,  0, 15, 10, 12,  0,  0,  5,  7,  5,  7, 11, 10, 12,  0,  0,  0,  5,  7,  5,  7,  3,  0, 11, 12,  0,  0,  5,  7,  5,  7,  0,  0,  0, 11, 10, 16,  5,  7,  5},
        { 6,  8,  6,  8,  1,  0, 15, 10, 12,  0,  6,  8,  6,  8,  0, 11, 10, 16,  0,  0,  6,  8,  6,  8, 11, 10, 12,  0,  0,  0,  6,  8,  6,  8,  0,  0, 11, 12,  0,  0,  6,  8,  6,  8,  1,  0,  0, 11, 12,  0,  6,  8,  6},
        { 5,  7,  0,  0,  0,  0, 11, 10, 16,  0,  5,  7,  5,  7, 15, 10, 12,  0,  0,  0,  5,  7,  5,  7, 14, 10, 12,  0,  0,  0,  5,  7,  5,  7,  0,  0, 11, 12,  0,  0,  5,  7,  0,  0,  0,  0,  0, 11, 12,  0,  5,  7,  5},
        { 6,  8,  0,  0,  0,  0, 11, 12,  0,  0,  6,  8,  6,  8, 11, 10, 12,  0,  0,  0,  6,  8,  6,  8,  0, 11, 12,  0,  0,  0,  6,  8,  6,  8,  0,  0, 11, 12,  4,  0,  6,  8,  0, 15, 19, 19, 19, 10, 12,  0,  6,  8,  6},
        { 5,  7,  0, 15, 19, 19, 10, 12,  0,  0,  5,  7,  5,  7, 11, 10, 12,  0,  0,  0,  5,  7,  5,  7,  0, 11, 10, 13,  0,  0,  5,  7,  5,  7, 15, 19, 10, 12,  4,  0,  5,  7,  0, 11, 10, 18, 10, 10, 10, 13,  5,  7,  5},
        { 6,  8,  0, 11, 10, 10, 10, 12,  0,  0,  6,  8,  6,  8, 11, 10, 12,  0,  0,  0,  6,  8,  6,  8,  0, 11, 10, 16,  0,  0,  6,  8,  6,  8, 11, 10, 10, 12,  0,  0,  6,  8, 15, 10, 12,  0, 14, 18, 18, 16,  6,  8,  6},
        { 5,  7,  0, 14, 18, 10, 10, 12,  0,  0,  5,  7,  5,  7, 14, 10, 12,  0,  0,  0,  5,  7,  5,  7,  0, 11, 12,  1,  0,  0,  5,  7,  5,  7, 11, 10, 10, 12,  0,  0,  5,  7, 11, 10, 12,  0,  5,  7,  5,  7,  5,  7,  5},
        { 6,  8,  0,  0,  1, 14, 10, 12,  2,  0,  6,  8,  6,  8,  0, 11, 12,  0,  0,  0,  6,  8,  6,  8,  0, 11, 12,  0,  0,  0,  6,  8,  6,  8, 14, 18, 10, 12,  0,  0,  6,  8, 11, 10, 12,  1,  6,  8,  6,  8,  6,  8,  6},
        { 5,  7,  0,  0,  0,  3, 11, 12,  0,  0,  1,  0,  0,  0,  0, 11, 12,  0,  0,  0,  5,  7,  5,  7,  0, 11, 12,  0,  0,  0,  5,  7,  5,  7,  2,  0, 11, 12,  0,  0,  5,  7, 11, 10, 12,  1,  5,  7,  5,  7,  5,  7,  5},
        { 6,  8,  0,  0,  0,  0, 11, 12,  0,  0,  0,  0,  0,  1,  0, 11, 12,  0,  0,  0,  6,  8,  6,  8,  4, 11, 12,  0,  0,  1,  6,  8,  6,  8,  0, 15, 10, 12,  0,  0,  6,  8, 11, 10, 12,  3,  6,  8,  6,  8,  6,  8,  6},
        { 5,  7,  0,  0,  0,  0, 11, 10, 19, 19, 19, 19, 19, 19, 19, 10, 12,  0,  0,  0,  5,  7,  5,  7,  0, 11, 10, 19, 19, 19, 19, 19, 19, 19, 19, 10, 10, 12,  0,  0,  5,  7, 14, 10, 12,  0,  0,  2,  0,  0,  5,  7,  5},
        { 6,  8,  1,  0,  0,  0, 14, 18, 18, 18, 18, 10, 10, 18, 18, 18, 16,  0,  0,  0,  6,  8,  6,  8,  0, 14, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 10, 12,  0,  0,  6,  8,  0, 11, 12,  0,  0,  0,  0,  2,  6,  8,  6},
        { 5,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0, 14, 16,  0,  0,  0,  0,  0,  5,  7,  5,  7,  5,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 14, 16,  0,  0,  5,  7,  0, 11, 10, 19, 19, 19, 19, 19, 19, 19, 20},
        { 6,  8,  0,  0,  0,  1,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  8,  6,  8,  6,  8,  0,  0,  0,  1,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  6,  8,  0, 14, 18, 18, 18, 18, 18, 18, 18, 18, 20},
        { 5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5},
        { 6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6,  8,  6},
        { 5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5}
    };
    private int[][] snowMap = { // [31][53]
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  6,  0,  0},
        { 0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  2,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  4,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  5,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  4,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  5,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  3,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  2,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  3,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  1,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  2,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
    };
    /* 
     * Exit num 1 : (128, 448, 32, 32)
     * Exit num 2 : (128, 64, 32, 32)
     * Exit num 3 : (800, 64, 32, 32)
     * Exit num 4 : (1600, 64, 32, 32)
     * Exit num 5 : (1600, 448, 43, 43)
     * Exit num 6 : (1600, 896, 32, 32)
     * Exit num 7 : (800, 896, 32, 32)
     */
    // Constructor
    public Level(int levelNumber, Player player, int health) {
        this.health = health;
        this.levelNumber = levelNumber;
        this.player = player;
        enemies = new ArrayList <Enemy> (0);
        fireballs = new ArrayList <Fireball> (0);
        bulletProjectile = new ArrayList <PlayerProjectile>();
        levelObjects = new ArrayList <LevelObject> (0);
        bomb = new ArrayList <Bomb> ();
        
        String fileName = "Level" + levelNumber;
        
        try {
            
            File mapFile = new File ("maps/" + fileName + ".txt");
            Scanner input = new Scanner (mapFile);
            maxMapX = input.nextInt();
            maxMapY = input.nextInt();
            
            for (int j = 0; j < maxMapX; j ++) {
                for (int i = 0; i < maxMapY; i ++) {
                    fill(input.nextInt(), i, j);  //enemies
                }
            }
            
        } catch(Exception E){ 
            
        }; 
    } // End of constructor
    
    public void setExitNum(int exitNum) {
        this.exitNum = exitNum;
    }
    
    public void update() {
        for (int i = 0; i < enemies.size(); i++) {
            enemies.get(i).update();
        } // End of for loop
        
        for (int i = 0; i < fireballs.size(); i++) {
            fireballs.get(i).update();
        } // End of for loop
        
        for (int i = 0; i < bulletProjectile.size(); i++) {
            bulletProjectile.get(i).update();
        } // End of for loop
        
        for (int i = 0; i < levelObjects.size(); i++) {
            levelObjects.get(i).update();
            //System.out.println("Drawing enemies"); // debug
        } // End of for loop
        
        for (int i=0;i<bomb.size();i++){
            bomb.get(i).update();
        }
        
        //checkCollision();
        
    } // End of method update()
    
    public Rectangle getExitBox() {
        return exitBox;
    }
    
    public int[][] getLevelMap (int currentLevel) {
        if (currentLevel == 0) {
            return villageMap;
        } else if (currentLevel == 1) {
            return swampMap;
        } else if (currentLevel == 2) {
            return desertMap;
        } else if (currentLevel == 3) {
            return forestMap;
        } else {
            return snowMap;
        }
    }
    
    /*
     * draw
     * Draws the map based on what level the user is on to screen
     * @param Graphics2D, int currentLevel
     */
    
    public void draw(Graphics2D g2d, int currentLevel) {
        
        checkCollision();
        
        if (currentLevel == 0) { //Village
            map = new Map();
            for (int i = 0; i < maxMapX; i++) {
                for (int j = 0; j < maxMapY; j++) {
                    if (villageMap[i][j] == 0) { //Green Grass
                        map.drawGreenGrass(g2d, j * 32, i * 32);
                    } else if (villageMap[i][j] == 1) { //Road
                        map.drawRoad(g2d, j * 32, i * 32);
                    } else if (villageMap[i][j] == 2) { //Flowers
                        map.drawFlowers(g2d, j * 32, i * 32);
                    } else if (villageMap[i][j] == 3) { //Rock
                        map.drawRock(g2d, j * 32, i * 32);
                    } else if (villageMap[i][j] == 4) { //Home tiles
                        map.drawHomeOneOne(g2d, j * 32, i * 32);
                    } else if (villageMap[i][j] == 5) {
                        map.drawHomeOneTwo(g2d, j * 32, i * 32);
                    } else if (villageMap[i][j] == 6) {
                        map.drawHomeOneThree(g2d, j * 32, i * 32);
                    } else if (villageMap[i][j] == 7) {
                        map.drawHomeTwoOne(g2d, j * 32, i * 32);
                    } else if (villageMap[i][j] == 8) {
                        map.drawHomeTwoTwo(g2d, j * 32, i * 32);
                    } else if (villageMap[i][j] == 9) {
                        map.drawHomeTwoThree(g2d, j * 32, i * 32);
                    } else if (villageMap[i][j] == 10) {
                        map.drawHomeThreeOne(g2d, j * 32, i * 32);
                    } else if (villageMap[i][j] == 11) {
                        map.drawHomeThreeTwo(g2d, j * 32, i * 32);
                    } else if (villageMap[i][j] == 12) {
                        map.drawHomeThreeThree(g2d, j * 32, i * 32);
                    } else if (villageMap[i][j] == 13) {
                        map.drawHomeFourOne(g2d, j * 32, i * 32);
                    } else if (villageMap[i][j] == 14) {
                        map.drawHomeFourTwo(g2d, j * 32, i * 32);
                    } else if (villageMap[i][j] == 15) {
                        map.drawHomeFourThree(g2d, j * 32, i * 32);
                    } else if (villageMap[i][j] == 16) {
                        map.drawHomeFiveOne(g2d, j * 32, i * 32);
                    } else if (villageMap[i][j] == 17) {
                        map.drawHomeFiveTwo(g2d, j * 32, i * 32);
                    } else if (villageMap[i][j] == 18) {
                        map.drawHomeFiveThree(g2d, j * 32, i * 32);
                    } else if (villageMap[i][j] == 19) { //Tree tiles
                        map.drawTreeOneTwo(g2d, j * 32, i * 32);
                    } else if (villageMap[i][j] == 20) {
                        map.drawTreeOneOne(g2d, j * 32, i * 32);
                    } else if (villageMap[i][j] == 21) {
                        map.drawTreeTwoTwo(g2d, j * 32, i * 32);
                    } else if (villageMap[i][j] == 22) {
                        map.drawTreeTwoOne(g2d, j * 32, i * 32);
                    } else if (villageMap[i][j] == 23) { //House1 tiles
                        map.drawHouse1OneOne(g2d, j * 32, i * 32);
                    } else if (villageMap[i][j] == 24) {
                        map.drawHouse1OneTwo(g2d, j * 32, i * 32);
                    } else if (villageMap[i][j] == 25) {
                        map.drawHouse1OneThree(g2d, j * 32, i * 32);
                    } else if (villageMap[i][j] == 26) {
                        map.drawHouse1TwoOne(g2d, j * 32, i * 32);
                    } else if (villageMap[i][j] == 27) {
                        map.drawHouse1TwoTwo(g2d, j * 32, i * 32);
                    } else if (villageMap[i][j] == 28) {
                        map.drawHouse1TwoThree(g2d, j * 32, i * 32);
                    } else if (villageMap[i][j] == 29) {
                        map.drawHouse1ThreeOne(g2d, j * 32, i * 32);
                    } else if (villageMap[i][j] == 30) {
                        map.drawHouse1ThreeTwo(g2d, j * 32, i * 32);
                    } else if (villageMap[i][j] == 31) {
                        map.drawHouse1ThreeThree(g2d, j * 32, i * 32);
                    } else if (villageMap[i][j] == 32) {
                        map.drawFence(g2d, j * 32, i * 32);
                    } else if (villageMap[i][j] == 33) {
                        map.drawVillagePortal(g2d, j * 32, i * 32);
                    }
                    
                }
            }
            exitBox = new Rectangle (1440, 960, 64, 32);
        } else if (currentLevel == 1) { //Swamp
            map = new Map();
            for(int i = 0; i < maxMapX; i++){
                for(int j = 0; j < maxMapY; j++){
                    if (swampMap[i][j] == 0) { //Swamp Water
                        map.drawSwamp(g2d, j * 32, i * 32);
                    } else if (swampMap[i][j] == 1) { //Tree Roots
                        map.drawTreeRoots(g2d, j * 32, i * 32);
                    } else if (swampMap[i][j] == 2) { //Lilypads, because why not
                        map.drawLilypad(g2d, j * 32, i * 32);
                    } else if (swampMap[i][j] == 3) { //Swamp rock
                        map.drawSwampRock(g2d, j * 32, i * 32);
                    } else if (swampMap[i][j] == 4) {
                        map.drawSwampPortal(g2d, j * 32, i * 32);
                    }
                }
            }
            exitBox = new Rectangle (128, 928, 64, 32);
        } else if (currentLevel == 2) { //Desert
            map = new Map();
            for (int i = 0; i < maxMapX; i++) {
                for (int j = 0; j < maxMapY; j++) {
                    if (desertMap[i][j] == 0) { //Sand 
                        map.drawSand(g2d, j * 32, i * 32);
                    } else if (desertMap[i][j] == 1) { //Cactuses
                        map.drawCactus(g2d, j * 32, i * 32);
                    } else if (desertMap[i][j] == 2) { //Animal skeletons
                        map.drawSkeleton(g2d, j * 32, i * 32);
                    } else if (desertMap[i][j] == 3) { //A desert creature
                        map.drawSandAnimal(g2d, j * 32, i * 32);
                    } else if (desertMap[i][j] == 4) { //Coconut
                        map.drawSandFruit(g2d, j * 32, i * 32);
                    } else if (desertMap[i][j] == 5) { //Tree tiles
                        map.drawSandTreeOneOne(g2d, j * 32, i * 32);
                    } else if (desertMap[i][j] == 6) {
                        map.drawSandTreeOneTwo(g2d, j * 32, i * 32);
                    } else if (desertMap[i][j] == 7) {
                        map.drawSandTreeTwoOne(g2d, j * 32, i * 32);
                    } else if (desertMap[i][j] == 8) {
                        map.drawSandTreeTwoTwo(g2d, j * 32, i * 32);
                    } else if (desertMap[i][j] == 9) { //Lond tree tiles
                        map.drawLongTreeOneOne(g2d, j * 32, i * 32);
                    } else if (desertMap[i][j] == 10) {
                        map.drawLongTreeOneTwo(g2d, j * 32, i * 32);
                    } else if (desertMap[i][j] == 11) { //Desert rock
                        map.drawDesertRock(g2d, j * 32, i * 32);
                    } else if (desertMap[i][j] == 12) {
                        map.drawDesertPortal(g2d, j * 32, i * 32);
                    }
                }
            }
            exitBox = new Rectangle (1504, 896, 64, 64);
        } else if (currentLevel == 3) { //Forest
            map = new Map();
            for (int i = 0; i < maxMapX; i++) {
                for (int j = 0; j < maxMapY; j++) {
                    if (forestMap[i][j] == 0) {
                        map.drawForestGrass(g2d, j * 32, i * 32);
                    } else if (forestMap[i][j] == 1) {
                        map.drawForestLeaves(g2d, j * 32, i * 32);
                    } else if (forestMap[i][j] == 2) {
                        map.drawForestFlowers(g2d, j * 32, i * 32);
                    } else if (forestMap[i][j] == 3) {
                        map.drawForestRock(g2d, j * 32, i * 32);
                    } else if (forestMap[i][j] == 4) {
                        map.drawForestPlant(g2d, j * 32, i * 32);
                    } else if (forestMap[i][j] == 5) {
                        map.drawForestTreeOneOne(g2d, j * 32, i * 32);
                    } else if (forestMap[i][j] == 6) {
                        map.drawForestTreeOneTwo(g2d, j * 32, i * 32);
                    } else if (forestMap[i][j] == 7) {
                        map.drawForestTreeTwoOne(g2d, j * 32, i * 32);
                    } else if (forestMap[i][j] == 8) {
                        map.drawForestTreeTwoTwo(g2d, j * 32, i * 32);
                    } else if (forestMap[i][j] == 9) {
                        map.drawThickGrass(g2d, j * 32, i * 32);
                    } else if (forestMap[i][j] == 10) {
                        map.drawPathOne(g2d, j * 32, i * 32);
                    } else if (forestMap[i][j] == 11) {
                        map.drawPathTwo(g2d, j * 32, i * 32);
                    } else if (forestMap[i][j] == 12) {
                        map.drawPathThree(g2d, j * 32, i * 32);
                    } else if (forestMap[i][j] == 13) {
                        map.drawPathFour(g2d, j * 32, i * 32);
                    } else if (forestMap[i][j] == 14) {
                        map.drawPathFive(g2d, j * 32, i * 32);
                    } else if (forestMap[i][j] == 15) {
                        map.drawPathSix(g2d, j * 32, i * 32);
                    } else if (forestMap[i][j] == 16) {
                        map.drawPathSeven(g2d, j * 32, i * 32);
                    } else if (forestMap[i][j] == 17) {
                        map.drawPathEight(g2d, j * 32, i * 32);
                    } else if (forestMap[i][j] == 18) {
                        map.drawPathNine(g2d, j * 32, i * 32);
                    } else if (forestMap[i][j] == 19) {
                        map.drawPathTen(g2d, j * 32, i * 32);
                    } else if (forestMap[i][j] == 20) {
                        map.drawForestPortal(g2d, j * 32, i * 32);
                    }
                }
            }
            exitBox = new Rectangle (1678, 832, 32, 64);
        } else if (currentLevel == 4) { //Snow
            map = new Map();
            for (int i = 0; i < maxMapX; i++) {
                for (int j = 0; j < maxMapY; j++) {
                    if (snowMap[i][j] == 0) {
                        map.drawSnow(g2d, j * 32, i * 32);
                    } else if (snowMap[i][j] == 1) {
                        map.drawSnowRock(g2d, j * 32, i * 32);
                    } else if (snowMap[i][j] == 2) {
                        map.drawSnowTreeOneOne(g2d, j * 32, i * 32);
                    } else if (snowMap[i][j] == 3) {
                        map.drawSnowTreeOneTwo(g2d, j * 32, i * 32);
                    } else if (snowMap[i][j] == 4) {
                        map.drawSnowTreeTwoOne(g2d, j * 32, i * 32);
                    } else if (snowMap[i][j] == 5) {
                        map.drawSnowTreeTwoTwo(g2d, j * 32, i * 32);
                    } else if (snowMap[i][j] == 6) {
                        map.drawSnowPortal(g2d, j * 32, i * 32);
                    }
                }
            }
            
            if (exitNum == 1) {
                exitBox = new Rectangle (64, 448, 32, 32);
            } else if (exitNum == 2) {
                exitBox = new Rectangle (64, 64, 32, 32);
            } else if (exitNum == 3) {
                exitBox = new Rectangle (736, 64, 32, 32);
            } else if (exitNum == 4) {
                exitBox = new Rectangle (1600, 64, 32, 32);
            } else if (exitNum == 5) {
                exitBox = new Rectangle(1600, 448, 43, 43);
            } else if (exitNum == 6) {
                exitBox = new Rectangle (1600, 896, 32, 32);
            } else if (exitNum == 7) {
                exitBox = new Rectangle (736, 896, 32, 32);
            }
        }
        else if (currentLevel == 5){
            exitBox = new Rectangle (1000, 1000, 1, 1);
        }
        
        for (int i = 0; i < levelObjects.size(); i++) {
            levelObjects.get(i).draw(g2d);
            //System.out.println("Drawing enemies"); // debug
        } // End of for loop
        
        for (int i = 0; i < enemies.size(); i++) {
            enemies.get(i).draw(g2d);
            //System.out.println("Drawing enemies"); // debug
        } // End of for loop
        
        for (int i = 0; i < fireballs.size(); i++) {
            fireballs.get(i).draw(g2d);
            
        }  // End of for loop
        
        for (int i = 0; i < bulletProjectile.size(); i++) {
            bulletProjectile.get(i).draw(g2d);
            
        }  // End of for loop
        
        for (int i = 0; i < bomb.size(); i++) {
            bomb.get(i).draw(g2d);
            
        }  // End of for 
        
    } // End of method draw(g2d)  
    
    
    /*
     * setObstacleMap
     * sets the obstacle map
     * @param int [][]
     */
    public void setObstacleMap (int[][] obstacles) {
        this.obstacles = obstacles;
    }
    
    /*
     * checkCollision
     * checks collision between player, projectiles and objects
     * @param
     */
    public void checkCollision(){
        
        //Checks for fireball and player collision
        for (int i = 0; i < fireballs.size(); i++) {
            if (player.getBoundingBox().intersects(fireballs.get(i).getBoundingBox())) {
                health--;
                
                try {
                    File hurt = new File("Player_Hit.wav");
                    AudioInputStream hurtSound = AudioSystem.getAudioInputStream(hurt);
                    DataLine.Info ouch = new DataLine.Info(Clip.class, hurtSound.getFormat());
                    Clip hurtClip = (Clip)AudioSystem.getLine(ouch);
                    
                    hurtClip.open(hurtSound);
                    
                    FloatControl gainControl = (FloatControl) hurtClip.getControl(FloatControl.Type.MASTER_GAIN);
                    gainControl.setValue(6.0f);
                    
                    hurtClip.start();
                    
                } catch (Exception e) {
                    e.printStackTrace();
                }
                
                remove(fireballs.get(i));
                if (i > 0){
                    i--;
                }
            }
        }
        
        //checks for player bullet and enemy collsion
        for (int i = 0; i < bulletProjectile.size(); i++) {
            for (int j=0;j < enemies.size() && bulletProjectile.size() > 0; j++){
                if (bulletProjectile.get(i).getBulletBox().intersects(enemies.get(j).getBoundingBox())){
                    
                    try {
                        File killed = new File("Enemy_Killed.wav");
                        AudioInputStream killSound = AudioSystem.getAudioInputStream(killed);
                        DataLine.Info kill = new DataLine.Info(Clip.class, killSound.getFormat());
                        Clip killClip = (Clip)AudioSystem.getLine(kill);
                        
                        killClip.open(killSound);
                        killClip.start();
                        
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    
                    remove(bulletProjectile.get(i));
                    remove(enemies.get(j));
                    enemiesKilled++;
                    //cheap fix
                    if (i > 0){
                        i--;
                    }
                    if (j>0){
                        j--;
                    }
                } 
            }
        }
        
        
        //checks for player and enemy collsion
        for (int i=0; i< enemies.size(); i++){
            if (player.getBoundingBox().intersects(enemies.get(i).getBoundingBox())){
                health--;
                try {
                    File hurt = new File("Player_Hit.wav");
                    AudioInputStream hurtSound = AudioSystem.getAudioInputStream(hurt);
                    DataLine.Info ouch = new DataLine.Info(Clip.class, hurtSound.getFormat());
                    Clip hurtClip = (Clip)AudioSystem.getLine(ouch);
                    
                    hurtClip.open(hurtSound);
                    
                    FloatControl gainControl = (FloatControl) hurtClip.getControl(FloatControl.Type.MASTER_GAIN);
                    gainControl.setValue(6.0f);
                    
                    hurtClip.start();
                    
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        
        //checks for player and bomb collision
        for (int i=0; i< bomb.size(); i++){
            if (player.getBoundingBox().intersects(bomb.get(i).getBombBox())){
                remove(bomb.get(i));
                health= health - 2;
                try {
                    File hurt = new File("Player_Hit.wav");
                    AudioInputStream hurtSound = AudioSystem.getAudioInputStream(hurt);
                    DataLine.Info ouch = new DataLine.Info(Clip.class, hurtSound.getFormat());
                    Clip hurtClip = (Clip)AudioSystem.getLine(ouch);
                    
                    hurtClip.open(hurtSound);
                    
                    FloatControl gainControl = (FloatControl) hurtClip.getControl(FloatControl.Type.MASTER_GAIN);
                    gainControl.setValue(6.0f);
                    
                    hurtClip.start();
                    
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        
        //checks for player projectile and fireball collision
        for (int i = 0; i < bulletProjectile.size(); i++) {
            for (int j = 0; j < fireballs.size() && 0< bulletProjectile.size(); j++){
                
                if (bulletProjectile.get(i).getBulletBox().intersects(fireballs.get(j).getBoundingBox())){
                    try {
                        File destroyed = new File("Projectile_Collide.wav");
                        AudioInputStream destroySound = AudioSystem.getAudioInputStream(destroyed);
                        DataLine.Info destroy = new DataLine.Info(Clip.class, destroySound.getFormat());
                        Clip destroyClip = (Clip)AudioSystem.getLine(destroy);
                        
                        destroyClip.open(destroySound);
                        destroyClip.start();
                        
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    remove(bulletProjectile.get(i));
                    remove(fireballs.get(j));
                    if (i > 0){
                        i--;
                    }
                    if (j>0){
                        j--;
                    }
                }
            }
        }
        
        //checks for player projectile and bomb collision
        for (int i = 0; i < bulletProjectile.size(); i++) {
            for (int j = 0; j < bomb.size() && 0< bulletProjectile.size(); j++){
                if (bulletProjectile.get(i).getBulletBox().intersects(bomb.get(j).getBombBox())){
                    try {
                        File destroyed = new File("Projectile_Collide.wav");
                        AudioInputStream destroySound = AudioSystem.getAudioInputStream(destroyed);
                        DataLine.Info destroy = new DataLine.Info(Clip.class, destroySound.getFormat());
                        Clip destroyClip = (Clip)AudioSystem.getLine(destroy);
                        
                        destroyClip.open(destroySound);
                        destroyClip.start();
                        
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    remove(bulletProjectile.get(i));
                    remove(bomb.get(j));
                    if (i > 0){
                        i--;
                    }
                    if (j>0){
                        j--;
                    }
                }
            }
        }
        
        //check for player and fire collision
        for (int i=0; i<levelObjects.size(); i++){
            if (player.getBoundingBox().intersects(levelObjects.get(i).getBoundingBox())){
                try {
                    File hurt = new File("Player_Hit.wav");
                    AudioInputStream hurtSound = AudioSystem.getAudioInputStream(hurt);
                    DataLine.Info ouch = new DataLine.Info(Clip.class, hurtSound.getFormat());
                    Clip hurtClip = (Clip)AudioSystem.getLine(ouch);
                    
                    hurtClip.open(hurtSound);
                    
                    FloatControl gainControl = (FloatControl) hurtClip.getControl(FloatControl.Type.MASTER_GAIN);
                    gainControl.setValue(6.0f);
                    
                    hurtClip.start();
                    
                } catch (Exception e) {
                    e.printStackTrace();
                }
                health--;
            }
        }
        
        //Check playerProjectile and border collision
        for (int i = 0; i < bulletProjectile.size(); i++) {
            int projectileXTile = bulletProjectile.get(i).getX() / 32;
            int projectileYTile = bulletProjectile.get(i).getY() / 32;
            
            if (projectileXTile >= 52 || projectileYTile >= 30 || projectileXTile <= 1 || projectileYTile <= 1) {
                remove(bulletProjectile.get(i));
            } else if (obstacles[projectileYTile][projectileXTile] == 1) {
                remove(bulletProjectile.get(i));
            }
            
        }
        
        //Check bomb and border collision
        for (int i = 0; i < bomb.size(); i++) {
            int projectileXTile = bomb.get(i).getX() / 32;
            int projectileYTile = bomb.get(i).getY() / 32;
            if (projectileXTile >= 52 || projectileYTile >= 30 || projectileXTile <= 1 || projectileYTile <= 1) {
                remove(bomb.get(i));
            } else if (obstacles[projectileYTile][projectileXTile] == 1) {
                remove(bomb.get(i));
            }
        }
        
        //Check fire and border collision
        for (int i = 0; i < fireballs.size(); i++) {
            int projectileXTile = fireballs.get(i).getX() / 32;
            int projectileYTile = fireballs.get(i).getY() / 32;
            if (projectileXTile >= 52 || projectileYTile >= 30 || projectileXTile <= 1 || projectileYTile <= 1) {
                remove(fireballs.get(i));
            } else if (obstacles[projectileYTile][projectileXTile] == 1) {
                remove(fireballs.get(i));
            }
        }
        
    }
    
    /*
     * fil
     * fills the screen with map based on what level the user is on
     * @param int id, int i, int j
     */
    private void fill(int id, int i, int j) {
        if (id == 0){
            //earth
        }else if(id == 1){  //fire
            this.add(new Fire(i * 32, j * 32));
        }else if (id == 2){  //fire entity
            this.add(new FireEntity(id, 1 , 32 * i, 32 * j));
            
        }else if (id == 3){  //water entity
            this.add(new WaterEntity(id , 1 , 32 * i, 32 * j));
            
        }else if (id == 4){
            this.add (new EarthEntity(id , 1, 32 * i, 32 * j));
            
        }
    }
    
    /*
     * getEnemiesKilled
     * gets the number of enemeis killed this level
     * @param
     */
    public int getEnemiesKilled(){
        return this.enemiesKilled;
    }
    
    /*
     * getHealth
     * gets the Health of the player
     * @param
     * @return health
     */
    public int getHealth(){
        return this.health;
    }
    
    /*
     * setHealth
     * sets the Health of the player
     * @param int health
     */
    public void setHealth(int health){
        this.health = health;
    }
    
    /*
     * add
     * adds the player to the map
     * @param player
     */
    public void add(Player p) {
        this.player = p;
        p.setLevel(this);
    } // end of method
    
    /*
     * add
     * adds enemeis to the map
     * @param Enemey
     */
    public void add(Enemy newEnemy) {
        this.enemies.add(newEnemy);
        enemies.get(enemies.size()-1).setLevel(this);
    } // end of method
    
    /*
     * add
     * adds fireball projectile to the map
     * @param Fireball
     */
    public void add(Fireball fireball) {
        this.fireballs.add(fireball);
    } // end of method
    
    /*
     * add
     * adds bomb projectile to the map
     * @param Bomb
     */
    public void add(Bomb bomb){
        this.bomb.add(bomb);
    }
    
    /*
     * add
     * adds player projectile to the map
     * @param PlayerProjectile
     */
    public void add (PlayerProjectile bullet){
        this.bulletProjectile.add(bullet);
    }
    
    /*
     * add
     * adds LevelObject to the map
     * @param Enemey
     */
    public void add(LevelObject newObject) {
        this.levelObjects.add(newObject);
    } // end of method
    
    /*
     * remove
     * removes bomb from the map
     * @param Bomb
     */
    public void remove(Bomb toRemove){
        this.bomb.remove(toRemove);
    }
    
    /*
     * remove
     * removes enemeis from the map
     * @param Enemies
     */
    public void remove(Enemy toRemove) {
        this.enemies.remove(toRemove);
    } // end of method
    
    /*
     * remove
     * removes Fireball projectile from the map
     * @param Fireball
     */
    public void remove(Fireball toRemove) {
        this.fireballs.remove(toRemove);
    } // end of method
    
    /*
     * remove
     * removes PlayerProjectile from the map
     * @param PlayerProjectile
     */
    public void remove(PlayerProjectile toRemove){
        this.bulletProjectile.remove(toRemove);
    } 
    
    /*
     * remove
     * removes LevelObject from the map
     * @param LevelObject
     */
    
    public void remove(LevelObject toRemove) {
        this.levelObjects.remove(toRemove);
    } // end of method
    
    /*
     * getPlayer
     * gets the player from the map
     * @param 
     * @return player
     */
    public Player getPlayer() {
        return this.player;
    }
    
    /*
     * displayeHealth
     * displays the health of the player to the screen
     * @param graphics g, int health
     */
    public void displayHealth(Graphics g, int health) {
        
        g.setFont(new Font("default", Font.BOLD, 16));
        g.setColor(Color.RED);
        g.drawString("Health left: " + health, 1500, 40);
        
    }
    
    /*
     * removeAll
     * removes everything from the screen
     * @param 
     */
    public void removeAll(){
        for (int i=0; i< bulletProjectile.size();i++){
            remove(bulletProjectile.get(i));
        }
        
        for (int i=0; i<fireballs.size();i++){
            remove(fireballs.get(i));
        }
        
        for (int i=0;i < enemies.size();i++){
            remove (enemies.get(i));
        }
        System.out.println("REMOVED");
    }
    
} // End of class